// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public enum EAbilityCardId : int {
    None = 0,
    FireArrow = 101,
    FrostArrow = 102,
    PoisonArrow = 103,
    FireBall = 201,
    FrostBall = 202,
    PoisonBall = 203,
  }
  public enum EOrbitLevel : int {
    First = 0,
    Second = 1,
    Third = 2,
  }
  public enum EPlayerActionState : int {
    None,
    Idle,
    Moving,
    AttackPreparing,
    Attacking,
    UltAiming,
    UltProcessing,
  }
  public enum EPlayerAnimationState : int {
    None,
    Idle,
    Run,
    Attack,
  }
  public enum EPlayerLifeState : int {
    None,
    Alive,
    Dead,
  }
  public enum EStats : int {
    Unknown = 0,
    Speed = 1,
    MaxHp = 2,
    AttackDelay = 3,
  }
  public enum EStatusEffectTypeId : int {
    Unknown = 0,
    TicDamage = 1,
    SlowSpeed = 2,
  }
  public enum EStatusTypeId : int {
    Unknown = 0,
    Fire = 1,
    Freeze = 2,
    Poison = 3,
  }
  public enum ETeamRelation : int {
    Owner = 0,
    Ally = 1,
    Enemy = 2,
  }
  public enum EUltimateId : int {
    Unknown = 0,
    Basic = 1,
  }
  public enum EWeaponId : int {
    None = 0,
    BowShot = 1,
    OrbitalShot = 2,
  }
  public enum EffectTypeId : int {
    Unknown = 0,
    Damage = 1,
    Heal = 2,
  }
  public enum GameState : int {
    None,
    Initialization,
    MatchIntro,
    RoundStartCountDown,
    Running,
    RoundEnded,
    GameOver,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    LeftButton = 1 << 0,
    RightButton = 1 << 1,
    UpButton = 1 << 2,
    DownButton = 1 << 3,
  }
  public static unsafe partial class FlagsExtensions {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length, "Invalid array size", values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4463;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length, "Invalid array size", values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3319;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length, "Invalid array size", values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length, "Invalid array size", values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1433;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length, "Invalid array size", values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17491;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length, "Invalid array size", values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13669;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CountdownTimer {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP TimeLeft;
    [FieldOffset(0)]
    public FP StartTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8641;
        hash = hash * 31 + TimeLeft.GetHashCode();
        hash = hash * 31 + StartTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CountdownTimer*)ptr;
        FP.Serialize(&p->StartTime, serializer);
        FP.Serialize(&p->TimeLeft, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Serializable()]
  public unsafe partial struct EffectSetup {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EffectTypeId EffectTypeId;
    [FieldOffset(8)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10657;
        hash = hash * 31 + (Int32)EffectTypeId;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EffectSetup*)ptr;
        serializer.Stream.Serialize((Int32*)&p->EffectTypeId);
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public Button LeftButton;
    [FieldOffset(28)]
    public Button RightButton;
    [FieldOffset(40)]
    public Button UpButton;
    [FieldOffset(4)]
    public Button DownButton;
    [FieldOffset(56)]
    public FPVector3 Direction;
    [FieldOffset(104)]
    public FPVector3 UltDirection;
    [FieldOffset(80)]
    public FPVector3 FinalUltDirection;
    [FieldOffset(0)]
    public QBoolean IsUltimate;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19249;
        hash = hash * 31 + LeftButton.GetHashCode();
        hash = hash * 31 + RightButton.GetHashCode();
        hash = hash * 31 + UpButton.GetHashCode();
        hash = hash * 31 + DownButton.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + UltDirection.GetHashCode();
        hash = hash * 31 + FinalUltDirection.GetHashCode();
        hash = hash * 31 + IsUltimate.GetHashCode();
        return hash;
      }
    }
    static partial void GetMaxCountCodeGen(ref int maxCount) {
      maxCount = 6;
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.LeftButton: return LeftButton.IsDown;
        case InputButtons.RightButton: return RightButton.IsDown;
        case InputButtons.UpButton: return UpButton.IsDown;
        case InputButtons.DownButton: return DownButton.IsDown;
        default: return false;
      }
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.LeftButton: return LeftButton.WasPressed;
        case InputButtons.RightButton: return RightButton.WasPressed;
        case InputButtons.UpButton: return UpButton.WasPressed;
        case InputButtons.DownButton: return DownButton.WasPressed;
        default: return false;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        QBoolean.Serialize(&p->IsUltimate, serializer);
        Button.Serialize(&p->DownButton, serializer);
        Button.Serialize(&p->LeftButton, serializer);
        Button.Serialize(&p->RightButton, serializer);
        Button.Serialize(&p->UpButton, serializer);
        FPVector3.Serialize(&p->Direction, serializer);
        FPVector3.Serialize(&p->FinalUltDirection, serializer);
        FPVector3.Serialize(&p->UltDirection, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerAnimationStateStruct {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EPlayerAnimationState Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4871;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerAnimationStateStruct*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Serializable()]
  public unsafe partial struct StatusSetup {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    public EStatusTypeId StatusTypeId;
    [FieldOffset(0)]
    public EStatusEffectTypeId StatusEffectTypeId;
    [FieldOffset(24)]
    public FP Value;
    [FieldOffset(8)]
    public FP Duration;
    [FieldOffset(16)]
    public FP Period;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2153;
        hash = hash * 31 + (Int32)StatusTypeId;
        hash = hash * 31 + (Int32)StatusEffectTypeId;
        hash = hash * 31 + Value.GetHashCode();
        hash = hash * 31 + Duration.GetHashCode();
        hash = hash * 31 + Period.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatusSetup*)ptr;
        serializer.Stream.Serialize((Int32*)&p->StatusEffectTypeId);
        serializer.Stream.Serialize((Int32*)&p->StatusTypeId);
        FP.Serialize(&p->Duration, serializer);
        FP.Serialize(&p->Period, serializer);
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 1392;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<Map> Map;
    [FieldOffset(8)]
    public FP DeltaTime;
    [FieldOffset(16)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(32)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(48)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(64)]
    public RNGSession RngSession;
    [FieldOffset(80)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(128)]
    public BitSet1024 Systems;
    [FieldOffset(256)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(552)]
    public Int32 PlayerConnectedCount;
    [FieldOffset(560)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[768];
    [FieldOffset(1328)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(1336)]
    public GameState GameState;
    [FieldOffset(1360)]
    public CountdownTimer GameStateTimer;
    [FieldOffset(1376)]
    public CountdownTimer MainGameTimer;
    [FieldOffset(1340)]
    public fixed Int32 MatchScore[2];
    [FieldOffset(1352)]
    public FP ElapsedTime;
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 128, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12473;
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerConnectedCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + (Int32)GameState;
        hash = hash * 31 + GameStateTimer.GetHashCode();
        hash = hash * 31 + MainGameTimer.GetHashCode();
        fixed (Int32* p = MatchScore) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        hash = hash * 31 + ElapsedTime.GetHashCode();
        return hash;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRef.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
        serializer.Stream.Serialize(&p->PlayerConnectedCount);
        FixedArray.Serialize(p->input, serializer, Statics.SerializeInput);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        serializer.Stream.Serialize((Int32*)&p->GameState);
        serializer.Stream.SerializeBuffer(&p->MatchScore[0], 2);
        FP.Serialize(&p->ElapsedTime, serializer);
        Quantum.CountdownTimer.Serialize(&p->GameStateTimer, serializer);
        Quantum.CountdownTimer.Serialize(&p->MainGameTimer, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AbilityCardId : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EAbilityCardId Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 11057;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AbilityCardId*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Affected : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8117;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Affected*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Applied : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18041;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Applied*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ApplierStatusLink : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12689;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ApplierStatusLink*)ptr;
        serializer.Stream.Serialize(&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Armament : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2861;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Armament*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AttackPreparingDelay : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13001;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AttackPreparingDelay*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AttackRange : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(32)]
    public FP MinRange;
    [FieldOffset(24)]
    public FP MaxRange;
    [FieldOffset(8)]
    public FP CurrentRange;
    [FieldOffset(16)]
    public FP ExpansionRate;
    [FieldOffset(0)]
    public FP ContractionRate;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13681;
        hash = hash * 31 + MinRange.GetHashCode();
        hash = hash * 31 + MaxRange.GetHashCode();
        hash = hash * 31 + CurrentRange.GetHashCode();
        hash = hash * 31 + ExpansionRate.GetHashCode();
        hash = hash * 31 + ContractionRate.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AttackRange*)ptr;
        FP.Serialize(&p->ContractionRate, serializer);
        FP.Serialize(&p->CurrentRange, serializer);
        FP.Serialize(&p->ExpansionRate, serializer);
        FP.Serialize(&p->MaxRange, serializer);
        FP.Serialize(&p->MinRange, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BaseStats : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QDictionaryPtr<EStats, FP> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9851;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.BaseStats*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BaseStats*)ptr;
        QDictionary.Serialize(&p->Value, serializer, Statics.SerializeEStats, Statics.SerializeFP);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BasicUltimate : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 167;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BasicUltimate*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BowShotWeapon : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16417;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BowShotWeapon*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BushCollider : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18211;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BushCollider*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BushTemporaryReveal : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16703;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BushTemporaryReveal*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CollectTargetsInterval : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5441;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CollectTargetsInterval*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CollectTargetsTimer : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17489;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CollectTargetsTimer*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CollectingTargetsContinuously : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15973;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CollectingTargetsContinuously*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Cooldown : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20749;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Cooldown*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CooldownLeft : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18457;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CooldownLeft*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CooldownUp : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18401;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CooldownUp*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CurrentHp : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20173;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CurrentHp*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CurrentTarget : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public PlayerLink Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4349;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CurrentTarget*)ptr;
        Quantum.PlayerLink.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DamageEffect : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16921;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DamageEffect*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Dead : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10223;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Dead*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Destructed : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7057;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Destructed*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Direction : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FPVector3 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16301;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Direction*)ptr;
        FPVector3.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Dummy : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14951;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Dummy*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Duration : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6317;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Duration*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Effect : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9319;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Effect*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EffectSetups : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<EffectSetup> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6217;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.EffectSetups*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EffectSetups*)ptr;
        QList.Serialize(&p->Value, serializer, Statics.SerializeEffectSetup);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EffectValue : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10667;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EffectValue*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Fire : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3041;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Fire*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct FollowingProducer : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8287;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (FollowingProducer*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Freeze : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21277;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Freeze*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HealEffect : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 461;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HealEffect*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HiddenPreventsAttack : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19139;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HiddenPreventsAttack*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HitBuffer : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<EntityRef> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12959;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.HitBuffer*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HitBuffer*)ptr;
        QList.Serialize(&p->Value, serializer, Statics.SerializeEntityRef);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct InBush : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3347;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (InBush*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct InstantRotation : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17791;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (InstantRotation*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct IsVisibleToEnemies : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 11717;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (IsVisibleToEnemies*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Kill : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3361;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Kill*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct LookDirection : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FPVector3 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9437;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (LookDirection*)ptr;
        FPVector3.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct MaxHp : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19937;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (MaxHp*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct MovementAvailable : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4363;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (MovementAvailable*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Moving : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2753;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Moving*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct MuzzleOffset : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FPVector3 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14939;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (MuzzleOffset*)ptr;
        FPVector3.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ObstacleEntity : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8287;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ObstacleEntity*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ObstaclePreventsAttack : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public PlayerLink Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8081;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ObstaclePreventsAttack*)ptr;
        Quantum.PlayerLink.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct OrbitCenterFollowTarget : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17551;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (OrbitCenterFollowTarget*)ptr;
        EntityRef.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct OrbitCenterPosition : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FPVector3 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3229;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (OrbitCenterPosition*)ptr;
        FPVector3.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct OrbitLevel : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EOrbitLevel Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6917;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (OrbitLevel*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct OrbitPhase : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4079;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (OrbitPhase*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct OrbitalShotWeapon : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 11863;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (OrbitalShotWeapon*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Owner : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public PlayerLink Link;
    [FieldOffset(0)]
    public Int32 TeamIndex;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8221;
        hash = hash * 31 + Link.GetHashCode();
        hash = hash * 31 + TeamIndex.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Owner*)ptr;
        serializer.Stream.Serialize(&p->TeamIndex);
        Quantum.PlayerLink.Serialize(&p->Link, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PendingShotInterval : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4507;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PendingShotInterval*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PendingShotsCount : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 11909;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PendingShotsCount*)ptr;
        serializer.Stream.Serialize(&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Period : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4507;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Period*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerActionState : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EPlayerActionState Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9619;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerActionState*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerAnimationState : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerAnimationStateStruct Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18979;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerAnimationState*)ptr;
        Quantum.PlayerAnimationStateStruct.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLifeState : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EPlayerLifeState Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 233;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLifeState*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLink : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public PlayerRef Value;
    [FieldOffset(8)]
    public EntityRef Entity;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21391;
        hash = hash * 31 + Value.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLink*)ptr;
        PlayerRef.Serialize(&p->Value, serializer);
        EntityRef.Serialize(&p->Entity, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Poison : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1693;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Poison*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Processed : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10159;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Processed*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ProcessedTargets : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<EntityRef> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1319;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.ProcessedTargets*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProcessedTargets*)ptr;
        QList.Serialize(&p->Value, serializer, Statics.SerializeEntityRef);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ProcessingDeath : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6841;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProcessingDeath*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ProducerId : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17327;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProducerId*)ptr;
        EntityRef.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ProjectilesCount : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3533;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ProjectilesCount*)ptr;
        serializer.Stream.Serialize(&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Radius : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3643;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Radius*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Reached : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9739;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Reached*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ReadyToCollectTargets : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18301;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ReadyToCollectTargets*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct RotationSpeed : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13463;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (RotationSpeed*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SelfDestructTimer : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 523;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SelfDestructTimer*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Speed : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15091;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Speed*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StatChange : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EStats Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8821;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatChange*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StatsModifiers : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QDictionaryPtr<EStats, FP> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13337;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.StatsModifiers*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatsModifiers*)ptr;
        QDictionary.Serialize(&p->Value, serializer, Statics.SerializeEStats, Statics.SerializeFP);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Status : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7673;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Status*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StatusEffectTypeId : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EStatusEffectTypeId Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 9319;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatusEffectTypeId*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StatusSetups : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<StatusSetup> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21221;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.StatusSetups*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatusSetups*)ptr;
        QList.Serialize(&p->Value, serializer, Statics.SerializeStatusSetup);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StatusTypeId : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EStatusTypeId Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7669;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatusTypeId*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TargetBuffer : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<EntityRef> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16703;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.TargetBuffer*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TargetBuffer*)ptr;
        QList.Serialize(&p->Value, serializer, Statics.SerializeEntityRef);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TargetId : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3917;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TargetId*)ptr;
        EntityRef.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TargetLayerMask : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3793;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TargetLayerMask*)ptr;
        serializer.Stream.Serialize(&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TargetLimit : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2399;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TargetLimit*)ptr;
        serializer.Stream.Serialize(&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TargetRelations : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<ETeamRelation> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15493;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.TargetRelations*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TargetRelations*)ptr;
        QList.Serialize(&p->Value, serializer, Statics.SerializeETeamRelation);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TargetsHitCooldown : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<EntityRef> Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8297;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Value = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.TargetsHitCooldown*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TargetsHitCooldown*)ptr;
        QList.Serialize(&p->Value, serializer, Statics.SerializeEntityRef);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TemporaryTargetable : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8387;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TemporaryTargetable*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TimeLeft : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14657;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TimeLeft*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TimeSinceLastTick : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 137;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TimeSinceLastTick*)ptr;
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UltDirection : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FPVector3 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12113;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UltDirection*)ptr;
        FPVector3.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UltProcessing : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 281;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UltProcessing*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Ultimate : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8861;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Ultimate*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UltimateId : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EUltimateId Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13187;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UltimateId*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Unapplied : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 16487;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Unapplied*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WasUltimating : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7681;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WasUltimating*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponId : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EWeaponId Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 6427;
        hash = hash * 31 + (Int32)Value;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponId*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponRef : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3623;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponRef*)ptr;
        EntityRef.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponsActive : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17573;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponsActive*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WorldPosition : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FPVector3 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 10903;
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WorldPosition*)ptr;
        FPVector3.Serialize(&p->Value, serializer);
    }
  }
  public unsafe partial interface ISignalOnRoundEnded : ISignal {
    void OnRoundEnded(Frame f, Owner winner, Owner loser, QBoolean isDraw);
  }
  public unsafe partial interface ISignalOnGameRunning : ISignal {
    void OnGameRunning(Frame f);
  }
  public unsafe partial interface ISignalOnRoundStartCountDown : ISignal {
    void OnRoundStartCountDown(Frame f);
  }
  public unsafe partial interface ISignalOnGameOver : ISignal {
    void OnGameOver(Frame f, Owner winner);
  }
  public unsafe partial interface ISignalRespawnPlayer : ISignal {
    void RespawnPlayer(Frame f, PlayerLink playerLink);
  }
  public unsafe partial interface ISignalSetupPlayer : ISignal {
    void SetupPlayer(Frame f, Owner owner, FPVector3 at, QBoolean isRespawn, QBoolean isDummy);
  }
  public unsafe partial interface ISignalPlayerDead : ISignal {
    void PlayerDead(Frame f, Owner owner);
  }
  public static unsafe partial class Constants {
  }
  public unsafe partial class Frame {
    private ISignalOnRoundEnded[] _ISignalOnRoundEndedSystems;
    private ISignalOnGameRunning[] _ISignalOnGameRunningSystems;
    private ISignalOnRoundStartCountDown[] _ISignalOnRoundStartCountDownSystems;
    private ISignalOnGameOver[] _ISignalOnGameOverSystems;
    private ISignalRespawnPlayer[] _ISignalRespawnPlayerSystems;
    private ISignalSetupPlayer[] _ISignalSetupPlayerSystems;
    private ISignalPlayerDead[] _ISignalPlayerDeadSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities, 256);
      _ISignalOnRoundEndedSystems = BuildSignalsArray<ISignalOnRoundEnded>();
      _ISignalOnGameRunningSystems = BuildSignalsArray<ISignalOnGameRunning>();
      _ISignalOnRoundStartCountDownSystems = BuildSignalsArray<ISignalOnRoundStartCountDown>();
      _ISignalOnGameOverSystems = BuildSignalsArray<ISignalOnGameOver>();
      _ISignalRespawnPlayerSystems = BuildSignalsArray<ISignalRespawnPlayer>();
      _ISignalSetupPlayerSystems = BuildSignalsArray<ISignalSetupPlayer>();
      _ISignalPlayerDeadSystems = BuildSignalsArray<ISignalPlayerDead>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.AbilityCardId>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AbilityCardId>();
      BuildSignalsArrayOnComponentAdded<Quantum.Affected>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Affected>();
      BuildSignalsArrayOnComponentAdded<Quantum.Applied>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Applied>();
      BuildSignalsArrayOnComponentAdded<Quantum.ApplierStatusLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ApplierStatusLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.Armament>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Armament>();
      BuildSignalsArrayOnComponentAdded<Quantum.AttackPreparingDelay>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AttackPreparingDelay>();
      BuildSignalsArrayOnComponentAdded<Quantum.AttackRange>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AttackRange>();
      BuildSignalsArrayOnComponentAdded<Quantum.BaseStats>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BaseStats>();
      BuildSignalsArrayOnComponentAdded<Quantum.BasicUltimate>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BasicUltimate>();
      BuildSignalsArrayOnComponentAdded<Quantum.BowShotWeapon>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BowShotWeapon>();
      BuildSignalsArrayOnComponentAdded<Quantum.BushCollider>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BushCollider>();
      BuildSignalsArrayOnComponentAdded<Quantum.BushTemporaryReveal>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BushTemporaryReveal>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.CollectTargetsInterval>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CollectTargetsInterval>();
      BuildSignalsArrayOnComponentAdded<Quantum.CollectTargetsTimer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CollectTargetsTimer>();
      BuildSignalsArrayOnComponentAdded<Quantum.CollectingTargetsContinuously>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CollectingTargetsContinuously>();
      BuildSignalsArrayOnComponentAdded<Quantum.Cooldown>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Cooldown>();
      BuildSignalsArrayOnComponentAdded<Quantum.CooldownLeft>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CooldownLeft>();
      BuildSignalsArrayOnComponentAdded<Quantum.CooldownUp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CooldownUp>();
      BuildSignalsArrayOnComponentAdded<Quantum.CurrentHp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CurrentHp>();
      BuildSignalsArrayOnComponentAdded<Quantum.CurrentTarget>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CurrentTarget>();
      BuildSignalsArrayOnComponentAdded<Quantum.DamageEffect>();
      BuildSignalsArrayOnComponentRemoved<Quantum.DamageEffect>();
      BuildSignalsArrayOnComponentAdded<Quantum.Dead>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Dead>();
      BuildSignalsArrayOnComponentAdded<Quantum.Destructed>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Destructed>();
      BuildSignalsArrayOnComponentAdded<Quantum.Direction>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Direction>();
      BuildSignalsArrayOnComponentAdded<Quantum.Dummy>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Dummy>();
      BuildSignalsArrayOnComponentAdded<Quantum.Duration>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Duration>();
      BuildSignalsArrayOnComponentAdded<Quantum.Effect>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Effect>();
      BuildSignalsArrayOnComponentAdded<Quantum.EffectSetups>();
      BuildSignalsArrayOnComponentRemoved<Quantum.EffectSetups>();
      BuildSignalsArrayOnComponentAdded<Quantum.EffectValue>();
      BuildSignalsArrayOnComponentRemoved<Quantum.EffectValue>();
      BuildSignalsArrayOnComponentAdded<Quantum.Fire>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Fire>();
      BuildSignalsArrayOnComponentAdded<Quantum.FollowingProducer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.FollowingProducer>();
      BuildSignalsArrayOnComponentAdded<Quantum.Freeze>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Freeze>();
      BuildSignalsArrayOnComponentAdded<Quantum.HealEffect>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HealEffect>();
      BuildSignalsArrayOnComponentAdded<Quantum.HiddenPreventsAttack>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HiddenPreventsAttack>();
      BuildSignalsArrayOnComponentAdded<Quantum.HitBuffer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HitBuffer>();
      BuildSignalsArrayOnComponentAdded<Quantum.InBush>();
      BuildSignalsArrayOnComponentRemoved<Quantum.InBush>();
      BuildSignalsArrayOnComponentAdded<Quantum.InstantRotation>();
      BuildSignalsArrayOnComponentRemoved<Quantum.InstantRotation>();
      BuildSignalsArrayOnComponentAdded<Quantum.IsVisibleToEnemies>();
      BuildSignalsArrayOnComponentRemoved<Quantum.IsVisibleToEnemies>();
      BuildSignalsArrayOnComponentAdded<Quantum.Kill>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Kill>();
      BuildSignalsArrayOnComponentAdded<Quantum.LookDirection>();
      BuildSignalsArrayOnComponentRemoved<Quantum.LookDirection>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.MaxHp>();
      BuildSignalsArrayOnComponentRemoved<Quantum.MaxHp>();
      BuildSignalsArrayOnComponentAdded<Quantum.MovementAvailable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.MovementAvailable>();
      BuildSignalsArrayOnComponentAdded<Quantum.Moving>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Moving>();
      BuildSignalsArrayOnComponentAdded<Quantum.MuzzleOffset>();
      BuildSignalsArrayOnComponentRemoved<Quantum.MuzzleOffset>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.ObstacleEntity>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ObstacleEntity>();
      BuildSignalsArrayOnComponentAdded<Quantum.ObstaclePreventsAttack>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ObstaclePreventsAttack>();
      BuildSignalsArrayOnComponentAdded<Quantum.OrbitCenterFollowTarget>();
      BuildSignalsArrayOnComponentRemoved<Quantum.OrbitCenterFollowTarget>();
      BuildSignalsArrayOnComponentAdded<Quantum.OrbitCenterPosition>();
      BuildSignalsArrayOnComponentRemoved<Quantum.OrbitCenterPosition>();
      BuildSignalsArrayOnComponentAdded<Quantum.OrbitLevel>();
      BuildSignalsArrayOnComponentRemoved<Quantum.OrbitLevel>();
      BuildSignalsArrayOnComponentAdded<Quantum.OrbitPhase>();
      BuildSignalsArrayOnComponentRemoved<Quantum.OrbitPhase>();
      BuildSignalsArrayOnComponentAdded<Quantum.OrbitalShotWeapon>();
      BuildSignalsArrayOnComponentRemoved<Quantum.OrbitalShotWeapon>();
      BuildSignalsArrayOnComponentAdded<Quantum.Owner>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Owner>();
      BuildSignalsArrayOnComponentAdded<Quantum.PendingShotInterval>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PendingShotInterval>();
      BuildSignalsArrayOnComponentAdded<Quantum.PendingShotsCount>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PendingShotsCount>();
      BuildSignalsArrayOnComponentAdded<Quantum.Period>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Period>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerActionState>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerActionState>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerAnimationState>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerAnimationState>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLifeState>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLifeState>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.Poison>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Poison>();
      BuildSignalsArrayOnComponentAdded<Quantum.Processed>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Processed>();
      BuildSignalsArrayOnComponentAdded<Quantum.ProcessedTargets>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ProcessedTargets>();
      BuildSignalsArrayOnComponentAdded<Quantum.ProcessingDeath>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ProcessingDeath>();
      BuildSignalsArrayOnComponentAdded<Quantum.ProducerId>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ProducerId>();
      BuildSignalsArrayOnComponentAdded<Quantum.ProjectilesCount>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ProjectilesCount>();
      BuildSignalsArrayOnComponentAdded<Quantum.Radius>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Radius>();
      BuildSignalsArrayOnComponentAdded<Quantum.Reached>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Reached>();
      BuildSignalsArrayOnComponentAdded<Quantum.ReadyToCollectTargets>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ReadyToCollectTargets>();
      BuildSignalsArrayOnComponentAdded<Quantum.RotationSpeed>();
      BuildSignalsArrayOnComponentRemoved<Quantum.RotationSpeed>();
      BuildSignalsArrayOnComponentAdded<Quantum.SelfDestructTimer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SelfDestructTimer>();
      BuildSignalsArrayOnComponentAdded<Quantum.Speed>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Speed>();
      BuildSignalsArrayOnComponentAdded<Quantum.StatChange>();
      BuildSignalsArrayOnComponentRemoved<Quantum.StatChange>();
      BuildSignalsArrayOnComponentAdded<Quantum.StatsModifiers>();
      BuildSignalsArrayOnComponentRemoved<Quantum.StatsModifiers>();
      BuildSignalsArrayOnComponentAdded<Quantum.Status>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Status>();
      BuildSignalsArrayOnComponentAdded<Quantum.StatusEffectTypeId>();
      BuildSignalsArrayOnComponentRemoved<Quantum.StatusEffectTypeId>();
      BuildSignalsArrayOnComponentAdded<Quantum.StatusSetups>();
      BuildSignalsArrayOnComponentRemoved<Quantum.StatusSetups>();
      BuildSignalsArrayOnComponentAdded<Quantum.StatusTypeId>();
      BuildSignalsArrayOnComponentRemoved<Quantum.StatusTypeId>();
      BuildSignalsArrayOnComponentAdded<Quantum.TargetBuffer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TargetBuffer>();
      BuildSignalsArrayOnComponentAdded<Quantum.TargetId>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TargetId>();
      BuildSignalsArrayOnComponentAdded<Quantum.TargetLayerMask>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TargetLayerMask>();
      BuildSignalsArrayOnComponentAdded<Quantum.TargetLimit>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TargetLimit>();
      BuildSignalsArrayOnComponentAdded<Quantum.TargetRelations>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TargetRelations>();
      BuildSignalsArrayOnComponentAdded<Quantum.TargetsHitCooldown>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TargetsHitCooldown>();
      BuildSignalsArrayOnComponentAdded<Quantum.TemporaryTargetable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TemporaryTargetable>();
      BuildSignalsArrayOnComponentAdded<Quantum.TimeLeft>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TimeLeft>();
      BuildSignalsArrayOnComponentAdded<Quantum.TimeSinceLastTick>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TimeSinceLastTick>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.UltDirection>();
      BuildSignalsArrayOnComponentRemoved<Quantum.UltDirection>();
      BuildSignalsArrayOnComponentAdded<Quantum.UltProcessing>();
      BuildSignalsArrayOnComponentRemoved<Quantum.UltProcessing>();
      BuildSignalsArrayOnComponentAdded<Quantum.Ultimate>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Ultimate>();
      BuildSignalsArrayOnComponentAdded<Quantum.UltimateId>();
      BuildSignalsArrayOnComponentRemoved<Quantum.UltimateId>();
      BuildSignalsArrayOnComponentAdded<Quantum.Unapplied>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Unapplied>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
      BuildSignalsArrayOnComponentAdded<Quantum.WasUltimating>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WasUltimating>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponId>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponId>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponRef>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponRef>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponsActive>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponsActive>();
      BuildSignalsArrayOnComponentAdded<Quantum.WorldPosition>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WorldPosition>();
    }
    partial void SetPlayerInputCodeGen(PlayerRef player, Input input) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->LeftButton = i->LeftButton.Update(this.Number, input.LeftButton);
      i->RightButton = i->RightButton.Update(this.Number, input.RightButton);
      i->UpButton = i->UpButton.Update(this.Number, input.UpButton);
      i->DownButton = i->DownButton.Update(this.Number, input.DownButton);
      i->Direction = input.Direction;
      i->UltDirection = input.UltDirection;
      i->FinalUltDirection = input.FinalUltDirection;
      i->IsUltimate = input.IsUltimate;
    }
    public Input* GetPlayerInput(PlayerRef player) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    partial void GetPlayerLastConnectionStateCodeGen(ref BitSetRef bitSet) {
      bitSet = new(_globals->PlayerLastConnectionState.Bits, _globals->PlayerLastConnectionState.Length);
    }
    partial void ResetPhysicsCodeGen() {
      if (Context.Physics2D != null && Physics2D.Map != null && Physics2D.Map.Guid.IsDynamic) Physics2D.ResetMap();
      Physics2D.Init(_globals->PhysicsState2D.MapStaticCollidersState.TrackedMap);
      if (Context.Physics3D != null && Physics3D.Map != null && Physics3D.Map.Guid.IsDynamic) Physics3D.ResetMap();
      Physics3D.Init(_globals->PhysicsState3D.MapStaticCollidersState.TrackedMap);
    }
    public unsafe partial struct FrameSignals {
      public void OnRoundEnded(Owner winner, Owner loser, QBoolean isDraw) {
        var array = _f._ISignalOnRoundEndedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnRoundEnded(_f, winner, loser, isDraw);
          }
        }
      }
      public void OnGameRunning() {
        var array = _f._ISignalOnGameRunningSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnGameRunning(_f);
          }
        }
      }
      public void OnRoundStartCountDown() {
        var array = _f._ISignalOnRoundStartCountDownSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnRoundStartCountDown(_f);
          }
        }
      }
      public void OnGameOver(Owner winner) {
        var array = _f._ISignalOnGameOverSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnGameOver(_f, winner);
          }
        }
      }
      public void RespawnPlayer(PlayerLink playerLink) {
        var array = _f._ISignalRespawnPlayerSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.RespawnPlayer(_f, playerLink);
          }
        }
      }
      public void SetupPlayer(Owner owner, FPVector3 at, QBoolean isRespawn, QBoolean isDummy) {
        var array = _f._ISignalSetupPlayerSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.SetupPlayer(_f, owner, at, isRespawn, isDummy);
          }
        }
      }
      public void PlayerDead(Owner owner) {
        var array = _f._ISignalPlayerDeadSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.PlayerDead(_f, owner);
          }
        }
      }
    }
  }
  public unsafe partial class Statics {
    public static FrameSerializer.Delegate SerializeEStats;
    public static FrameSerializer.Delegate SerializeFP;
    public static FrameSerializer.Delegate SerializeEffectSetup;
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeStatusSetup;
    public static FrameSerializer.Delegate SerializeETeamRelation;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitStaticDelegatesGen() {
      SerializeEStats = (v, s) => {{ s.Stream.Serialize((Int32*)v); }};
      SerializeFP = FP.Serialize;
      SerializeEffectSetup = Quantum.EffectSetup.Serialize;
      SerializeEntityRef = EntityRef.Serialize;
      SerializeStatusSetup = Quantum.StatusSetup.Serialize;
      SerializeETeamRelation = (v, s) => {{ s.Stream.Serialize((Int32*)v); }};
      SerializeInput = Quantum.Input.Serialize;
    }
    static partial void RegisterSimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(Quantum.AbilityCardId), Quantum.AbilityCardId.SIZE);
      typeRegistry.Register(typeof(Quantum.Affected), Quantum.Affected.SIZE);
      typeRegistry.Register(typeof(Quantum.Applied), Quantum.Applied.SIZE);
      typeRegistry.Register(typeof(Quantum.ApplierStatusLink), Quantum.ApplierStatusLink.SIZE);
      typeRegistry.Register(typeof(Quantum.Armament), Quantum.Armament.SIZE);
      typeRegistry.Register(typeof(AssetGuid), AssetGuid.SIZE);
      typeRegistry.Register(typeof(AssetRef), AssetRef.SIZE);
      typeRegistry.Register(typeof(Quantum.AttackPreparingDelay), Quantum.AttackPreparingDelay.SIZE);
      typeRegistry.Register(typeof(Quantum.AttackRange), Quantum.AttackRange.SIZE);
      typeRegistry.Register(typeof(Quantum.BaseStats), Quantum.BaseStats.SIZE);
      typeRegistry.Register(typeof(Quantum.BasicUltimate), Quantum.BasicUltimate.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      typeRegistry.Register(typeof(Quantum.BowShotWeapon), Quantum.BowShotWeapon.SIZE);
      typeRegistry.Register(typeof(Quantum.BushCollider), Quantum.BushCollider.SIZE);
      typeRegistry.Register(typeof(Quantum.BushTemporaryReveal), Quantum.BushTemporaryReveal.SIZE);
      typeRegistry.Register(typeof(Button), Button.SIZE);
      typeRegistry.Register(typeof(CallbackFlags), 4);
      typeRegistry.Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      typeRegistry.Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      typeRegistry.Register(typeof(Quantum.CollectTargetsInterval), Quantum.CollectTargetsInterval.SIZE);
      typeRegistry.Register(typeof(Quantum.CollectTargetsTimer), Quantum.CollectTargetsTimer.SIZE);
      typeRegistry.Register(typeof(Quantum.CollectingTargetsContinuously), Quantum.CollectingTargetsContinuously.SIZE);
      typeRegistry.Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      typeRegistry.Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      typeRegistry.Register(typeof(ComponentTypeRef), ComponentTypeRef.SIZE);
      typeRegistry.Register(typeof(Quantum.Cooldown), Quantum.Cooldown.SIZE);
      typeRegistry.Register(typeof(Quantum.CooldownLeft), Quantum.CooldownLeft.SIZE);
      typeRegistry.Register(typeof(Quantum.CooldownUp), Quantum.CooldownUp.SIZE);
      typeRegistry.Register(typeof(Quantum.CountdownTimer), Quantum.CountdownTimer.SIZE);
      typeRegistry.Register(typeof(Quantum.CurrentHp), Quantum.CurrentHp.SIZE);
      typeRegistry.Register(typeof(Quantum.CurrentTarget), Quantum.CurrentTarget.SIZE);
      typeRegistry.Register(typeof(Quantum.DamageEffect), Quantum.DamageEffect.SIZE);
      typeRegistry.Register(typeof(Quantum.Dead), Quantum.Dead.SIZE);
      typeRegistry.Register(typeof(Quantum.Destructed), Quantum.Destructed.SIZE);
      typeRegistry.Register(typeof(Quantum.Direction), Quantum.Direction.SIZE);
      typeRegistry.Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      typeRegistry.Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Dummy), Quantum.Dummy.SIZE);
      typeRegistry.Register(typeof(Quantum.Duration), Quantum.Duration.SIZE);
      typeRegistry.Register(typeof(Quantum.EAbilityCardId), 4);
      typeRegistry.Register(typeof(Quantum.EOrbitLevel), 4);
      typeRegistry.Register(typeof(Quantum.EPlayerActionState), 4);
      typeRegistry.Register(typeof(Quantum.EPlayerAnimationState), 4);
      typeRegistry.Register(typeof(Quantum.EPlayerLifeState), 4);
      typeRegistry.Register(typeof(Quantum.EStats), 4);
      typeRegistry.Register(typeof(Quantum.EStatusEffectTypeId), 4);
      typeRegistry.Register(typeof(Quantum.EStatusTypeId), 4);
      typeRegistry.Register(typeof(Quantum.ETeamRelation), 4);
      typeRegistry.Register(typeof(Quantum.EUltimateId), 4);
      typeRegistry.Register(typeof(Quantum.EWeaponId), 4);
      typeRegistry.Register(typeof(Quantum.Effect), Quantum.Effect.SIZE);
      typeRegistry.Register(typeof(Quantum.EffectSetup), Quantum.EffectSetup.SIZE);
      typeRegistry.Register(typeof(Quantum.EffectSetups), Quantum.EffectSetups.SIZE);
      typeRegistry.Register(typeof(Quantum.EffectTypeId), 4);
      typeRegistry.Register(typeof(Quantum.EffectValue), Quantum.EffectValue.SIZE);
      typeRegistry.Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      typeRegistry.Register(typeof(EntityRef), EntityRef.SIZE);
      typeRegistry.Register(typeof(FP), FP.SIZE);
      typeRegistry.Register(typeof(FPBounds2), FPBounds2.SIZE);
      typeRegistry.Register(typeof(FPBounds3), FPBounds3.SIZE);
      typeRegistry.Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      typeRegistry.Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      typeRegistry.Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      typeRegistry.Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      typeRegistry.Register(typeof(FPVector2), FPVector2.SIZE);
      typeRegistry.Register(typeof(FPVector3), FPVector3.SIZE);
      typeRegistry.Register(typeof(Quantum.Fire), Quantum.Fire.SIZE);
      typeRegistry.Register(typeof(Quantum.FollowingProducer), Quantum.FollowingProducer.SIZE);
      typeRegistry.Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      typeRegistry.Register(typeof(FrameTimer), FrameTimer.SIZE);
      typeRegistry.Register(typeof(Quantum.Freeze), Quantum.Freeze.SIZE);
      typeRegistry.Register(typeof(Quantum.GameState), 4);
      typeRegistry.Register(typeof(Quantum.HealEffect), Quantum.HealEffect.SIZE);
      typeRegistry.Register(typeof(Quantum.HiddenPreventsAttack), Quantum.HiddenPreventsAttack.SIZE);
      typeRegistry.Register(typeof(HingeJoint), HingeJoint.SIZE);
      typeRegistry.Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      typeRegistry.Register(typeof(Hit), Hit.SIZE);
      typeRegistry.Register(typeof(Hit3D), Hit3D.SIZE);
      typeRegistry.Register(typeof(Quantum.HitBuffer), Quantum.HitBuffer.SIZE);
      typeRegistry.Register(typeof(Quantum.InBush), Quantum.InBush.SIZE);
      typeRegistry.Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      typeRegistry.Register(typeof(Quantum.InputButtons), 4);
      typeRegistry.Register(typeof(Quantum.InstantRotation), Quantum.InstantRotation.SIZE);
      typeRegistry.Register(typeof(IntVector2), IntVector2.SIZE);
      typeRegistry.Register(typeof(IntVector3), IntVector3.SIZE);
      typeRegistry.Register(typeof(Quantum.IsVisibleToEnemies), Quantum.IsVisibleToEnemies.SIZE);
      typeRegistry.Register(typeof(Joint), Joint.SIZE);
      typeRegistry.Register(typeof(Joint3D), Joint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Kill), Quantum.Kill.SIZE);
      typeRegistry.Register(typeof(LayerMask), LayerMask.SIZE);
      typeRegistry.Register(typeof(Quantum.LookDirection), Quantum.LookDirection.SIZE);
      typeRegistry.Register(typeof(MapEntityId), MapEntityId.SIZE);
      typeRegistry.Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      typeRegistry.Register(typeof(Quantum.MaxHp), Quantum.MaxHp.SIZE);
      typeRegistry.Register(typeof(Quantum.MovementAvailable), Quantum.MovementAvailable.SIZE);
      typeRegistry.Register(typeof(Quantum.Moving), Quantum.Moving.SIZE);
      typeRegistry.Register(typeof(Quantum.MuzzleOffset), Quantum.MuzzleOffset.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      typeRegistry.Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      typeRegistry.Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      typeRegistry.Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      typeRegistry.Register(typeof(NullableFP), NullableFP.SIZE);
      typeRegistry.Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      typeRegistry.Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      typeRegistry.Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      typeRegistry.Register(typeof(Quantum.ObstacleEntity), Quantum.ObstacleEntity.SIZE);
      typeRegistry.Register(typeof(Quantum.ObstaclePreventsAttack), Quantum.ObstaclePreventsAttack.SIZE);
      typeRegistry.Register(typeof(Quantum.OrbitCenterFollowTarget), Quantum.OrbitCenterFollowTarget.SIZE);
      typeRegistry.Register(typeof(Quantum.OrbitCenterPosition), Quantum.OrbitCenterPosition.SIZE);
      typeRegistry.Register(typeof(Quantum.OrbitLevel), Quantum.OrbitLevel.SIZE);
      typeRegistry.Register(typeof(Quantum.OrbitPhase), Quantum.OrbitPhase.SIZE);
      typeRegistry.Register(typeof(Quantum.OrbitalShotWeapon), Quantum.OrbitalShotWeapon.SIZE);
      typeRegistry.Register(typeof(Quantum.Owner), Quantum.Owner.SIZE);
      typeRegistry.Register(typeof(Quantum.PendingShotInterval), Quantum.PendingShotInterval.SIZE);
      typeRegistry.Register(typeof(Quantum.PendingShotsCount), Quantum.PendingShotsCount.SIZE);
      typeRegistry.Register(typeof(Quantum.Period), Quantum.Period.SIZE);
      typeRegistry.Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      typeRegistry.Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks2D), PhysicsCallbacks2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks3D), PhysicsCallbacks3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      typeRegistry.Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints2D), PhysicsJoints2D.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints3D), PhysicsJoints3D.SIZE);
      typeRegistry.Register(typeof(PhysicsQueryRef), PhysicsQueryRef.SIZE);
      typeRegistry.Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerActionState), Quantum.PlayerActionState.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerAnimationState), Quantum.PlayerAnimationState.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerAnimationStateStruct), Quantum.PlayerAnimationStateStruct.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerLifeState), Quantum.PlayerLifeState.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerLink), Quantum.PlayerLink.SIZE);
      typeRegistry.Register(typeof(PlayerRef), PlayerRef.SIZE);
      typeRegistry.Register(typeof(Quantum.Poison), Quantum.Poison.SIZE);
      typeRegistry.Register(typeof(Quantum.Processed), Quantum.Processed.SIZE);
      typeRegistry.Register(typeof(Quantum.ProcessedTargets), Quantum.ProcessedTargets.SIZE);
      typeRegistry.Register(typeof(Quantum.ProcessingDeath), Quantum.ProcessingDeath.SIZE);
      typeRegistry.Register(typeof(Quantum.ProducerId), Quantum.ProducerId.SIZE);
      typeRegistry.Register(typeof(Quantum.ProjectilesCount), Quantum.ProjectilesCount.SIZE);
      typeRegistry.Register(typeof(Ptr), Ptr.SIZE);
      typeRegistry.Register(typeof(QBoolean), QBoolean.SIZE);
      typeRegistry.Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      typeRegistry.Register(typeof(QueryOptions), 2);
      typeRegistry.Register(typeof(RNGSession), RNGSession.SIZE);
      typeRegistry.Register(typeof(Quantum.Radius), Quantum.Radius.SIZE);
      typeRegistry.Register(typeof(Quantum.Reached), Quantum.Reached.SIZE);
      typeRegistry.Register(typeof(Quantum.ReadyToCollectTargets), Quantum.ReadyToCollectTargets.SIZE);
      typeRegistry.Register(typeof(Quantum.RotationSpeed), Quantum.RotationSpeed.SIZE);
      typeRegistry.Register(typeof(Quantum.SelfDestructTimer), Quantum.SelfDestructTimer.SIZE);
      typeRegistry.Register(typeof(Shape2D), Shape2D.SIZE);
      typeRegistry.Register(typeof(Shape3D), Shape3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Speed), Quantum.Speed.SIZE);
      typeRegistry.Register(typeof(SpringJoint), SpringJoint.SIZE);
      typeRegistry.Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.StatChange), Quantum.StatChange.SIZE);
      typeRegistry.Register(typeof(Quantum.StatsModifiers), Quantum.StatsModifiers.SIZE);
      typeRegistry.Register(typeof(Quantum.Status), Quantum.Status.SIZE);
      typeRegistry.Register(typeof(Quantum.StatusEffectTypeId), Quantum.StatusEffectTypeId.SIZE);
      typeRegistry.Register(typeof(Quantum.StatusSetup), Quantum.StatusSetup.SIZE);
      typeRegistry.Register(typeof(Quantum.StatusSetups), Quantum.StatusSetups.SIZE);
      typeRegistry.Register(typeof(Quantum.StatusTypeId), Quantum.StatusTypeId.SIZE);
      typeRegistry.Register(typeof(Quantum.TargetBuffer), Quantum.TargetBuffer.SIZE);
      typeRegistry.Register(typeof(Quantum.TargetId), Quantum.TargetId.SIZE);
      typeRegistry.Register(typeof(Quantum.TargetLayerMask), Quantum.TargetLayerMask.SIZE);
      typeRegistry.Register(typeof(Quantum.TargetLimit), Quantum.TargetLimit.SIZE);
      typeRegistry.Register(typeof(Quantum.TargetRelations), Quantum.TargetRelations.SIZE);
      typeRegistry.Register(typeof(Quantum.TargetsHitCooldown), Quantum.TargetsHitCooldown.SIZE);
      typeRegistry.Register(typeof(Quantum.TemporaryTargetable), Quantum.TemporaryTargetable.SIZE);
      typeRegistry.Register(typeof(Quantum.TimeLeft), Quantum.TimeLeft.SIZE);
      typeRegistry.Register(typeof(Quantum.TimeSinceLastTick), Quantum.TimeSinceLastTick.SIZE);
      typeRegistry.Register(typeof(Transform2D), Transform2D.SIZE);
      typeRegistry.Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      typeRegistry.Register(typeof(Transform3D), Transform3D.SIZE);
      typeRegistry.Register(typeof(Quantum.UltDirection), Quantum.UltDirection.SIZE);
      typeRegistry.Register(typeof(Quantum.UltProcessing), Quantum.UltProcessing.SIZE);
      typeRegistry.Register(typeof(Quantum.Ultimate), Quantum.Ultimate.SIZE);
      typeRegistry.Register(typeof(Quantum.UltimateId), Quantum.UltimateId.SIZE);
      typeRegistry.Register(typeof(Quantum.Unapplied), Quantum.Unapplied.SIZE);
      typeRegistry.Register(typeof(View), View.SIZE);
      typeRegistry.Register(typeof(Quantum.WasUltimating), Quantum.WasUltimating.SIZE);
      typeRegistry.Register(typeof(Quantum.WeaponId), Quantum.WeaponId.SIZE);
      typeRegistry.Register(typeof(Quantum.WeaponRef), Quantum.WeaponRef.SIZE);
      typeRegistry.Register(typeof(Quantum.WeaponsActive), Quantum.WeaponsActive.SIZE);
      typeRegistry.Register(typeof(Quantum.WorldPosition), Quantum.WorldPosition.SIZE);
      typeRegistry.Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
    static partial void InitComponentTypeIdGen() {
      ComponentTypeId.Reset(ComponentTypeId.BuiltInComponentCount + 96)
        .AddBuiltInComponents()
        .Add<Quantum.AbilityCardId>(Quantum.AbilityCardId.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Affected>(Quantum.Affected.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Applied>(Quantum.Applied.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ApplierStatusLink>(Quantum.ApplierStatusLink.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Armament>(Quantum.Armament.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.AttackPreparingDelay>(Quantum.AttackPreparingDelay.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.AttackRange>(Quantum.AttackRange.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BaseStats>(Quantum.BaseStats.Serialize, null, Quantum.BaseStats.OnRemoved, ComponentFlags.None)
        .Add<Quantum.BasicUltimate>(Quantum.BasicUltimate.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BowShotWeapon>(Quantum.BowShotWeapon.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BushCollider>(Quantum.BushCollider.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.BushTemporaryReveal>(Quantum.BushTemporaryReveal.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.CollectTargetsInterval>(Quantum.CollectTargetsInterval.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.CollectTargetsTimer>(Quantum.CollectTargetsTimer.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.CollectingTargetsContinuously>(Quantum.CollectingTargetsContinuously.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Cooldown>(Quantum.Cooldown.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.CooldownLeft>(Quantum.CooldownLeft.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.CooldownUp>(Quantum.CooldownUp.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.CurrentHp>(Quantum.CurrentHp.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.CurrentTarget>(Quantum.CurrentTarget.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.DamageEffect>(Quantum.DamageEffect.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Dead>(Quantum.Dead.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Destructed>(Quantum.Destructed.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Direction>(Quantum.Direction.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Dummy>(Quantum.Dummy.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Duration>(Quantum.Duration.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Effect>(Quantum.Effect.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.EffectSetups>(Quantum.EffectSetups.Serialize, null, Quantum.EffectSetups.OnRemoved, ComponentFlags.None)
        .Add<Quantum.EffectValue>(Quantum.EffectValue.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Fire>(Quantum.Fire.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.FollowingProducer>(Quantum.FollowingProducer.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Freeze>(Quantum.Freeze.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.HealEffect>(Quantum.HealEffect.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.HiddenPreventsAttack>(Quantum.HiddenPreventsAttack.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.HitBuffer>(Quantum.HitBuffer.Serialize, null, Quantum.HitBuffer.OnRemoved, ComponentFlags.None)
        .Add<Quantum.InBush>(Quantum.InBush.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.InstantRotation>(Quantum.InstantRotation.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.IsVisibleToEnemies>(Quantum.IsVisibleToEnemies.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Kill>(Quantum.Kill.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.LookDirection>(Quantum.LookDirection.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.MaxHp>(Quantum.MaxHp.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.MovementAvailable>(Quantum.MovementAvailable.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Moving>(Quantum.Moving.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.MuzzleOffset>(Quantum.MuzzleOffset.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ObstacleEntity>(Quantum.ObstacleEntity.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ObstaclePreventsAttack>(Quantum.ObstaclePreventsAttack.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.OrbitCenterFollowTarget>(Quantum.OrbitCenterFollowTarget.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.OrbitCenterPosition>(Quantum.OrbitCenterPosition.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.OrbitLevel>(Quantum.OrbitLevel.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.OrbitPhase>(Quantum.OrbitPhase.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.OrbitalShotWeapon>(Quantum.OrbitalShotWeapon.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Owner>(Quantum.Owner.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PendingShotInterval>(Quantum.PendingShotInterval.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PendingShotsCount>(Quantum.PendingShotsCount.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Period>(Quantum.Period.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerActionState>(Quantum.PlayerActionState.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerAnimationState>(Quantum.PlayerAnimationState.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerLifeState>(Quantum.PlayerLifeState.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerLink>(Quantum.PlayerLink.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Poison>(Quantum.Poison.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Processed>(Quantum.Processed.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ProcessedTargets>(Quantum.ProcessedTargets.Serialize, null, Quantum.ProcessedTargets.OnRemoved, ComponentFlags.None)
        .Add<Quantum.ProcessingDeath>(Quantum.ProcessingDeath.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ProducerId>(Quantum.ProducerId.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ProjectilesCount>(Quantum.ProjectilesCount.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Radius>(Quantum.Radius.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Reached>(Quantum.Reached.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.ReadyToCollectTargets>(Quantum.ReadyToCollectTargets.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.RotationSpeed>(Quantum.RotationSpeed.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.SelfDestructTimer>(Quantum.SelfDestructTimer.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Speed>(Quantum.Speed.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.StatChange>(Quantum.StatChange.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.StatsModifiers>(Quantum.StatsModifiers.Serialize, null, Quantum.StatsModifiers.OnRemoved, ComponentFlags.None)
        .Add<Quantum.Status>(Quantum.Status.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.StatusEffectTypeId>(Quantum.StatusEffectTypeId.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.StatusSetups>(Quantum.StatusSetups.Serialize, null, Quantum.StatusSetups.OnRemoved, ComponentFlags.None)
        .Add<Quantum.StatusTypeId>(Quantum.StatusTypeId.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TargetBuffer>(Quantum.TargetBuffer.Serialize, null, Quantum.TargetBuffer.OnRemoved, ComponentFlags.None)
        .Add<Quantum.TargetId>(Quantum.TargetId.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TargetLayerMask>(Quantum.TargetLayerMask.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TargetLimit>(Quantum.TargetLimit.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TargetRelations>(Quantum.TargetRelations.Serialize, null, Quantum.TargetRelations.OnRemoved, ComponentFlags.None)
        .Add<Quantum.TargetsHitCooldown>(Quantum.TargetsHitCooldown.Serialize, null, Quantum.TargetsHitCooldown.OnRemoved, ComponentFlags.None)
        .Add<Quantum.TemporaryTargetable>(Quantum.TemporaryTargetable.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TimeLeft>(Quantum.TimeLeft.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.TimeSinceLastTick>(Quantum.TimeSinceLastTick.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.UltDirection>(Quantum.UltDirection.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.UltProcessing>(Quantum.UltProcessing.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Ultimate>(Quantum.Ultimate.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.UltimateId>(Quantum.UltimateId.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Unapplied>(Quantum.Unapplied.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WasUltimating>(Quantum.WasUltimating.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WeaponId>(Quantum.WeaponId.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WeaponRef>(Quantum.WeaponRef.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WeaponsActive>(Quantum.WeaponsActive.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WorldPosition>(Quantum.WorldPosition.Serialize, null, null, ComponentFlags.None)
        .Finish();
    }
    [Preserve()]
    public static void EnsureNotStrippedGen() {
      FramePrinter.EnsureNotStripped();
      FramePrinter.EnsurePrimitiveNotStripped<CallbackFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EAbilityCardId>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EOrbitLevel>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EPlayerActionState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EPlayerAnimationState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EPlayerLifeState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EStats>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EStatusEffectTypeId>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EStatusTypeId>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ETeamRelation>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EUltimateId>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EWeaponId>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EffectTypeId>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GameState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<QueryOptions>();
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
